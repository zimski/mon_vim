" ~/mon_vim/sessions/fstrz.vim:
" Vim session script.
" Created by session.vim 2.13 on 10 d√©cembre 2015 at 17:05:30.
" Open this file in Vim and run :source % to restore your session.

if exists('g:syntax_on') != 1 | syntax on | endif
if exists('g:did_load_filetypes') != 1 | filetype on | endif
if exists('g:did_load_ftplugin') != 1 | filetype plugin on | endif
if exists('g:did_indent_on') != 1 | filetype indent on | endif
if &background != 'light'
	set background=light
endif
if !exists('g:colors_name') || g:colors_name != 'molokai' | colorscheme molokai | endif
call setqflist([{'lnum': 121, 'col': 7, 'valid': 1, 'vcol': 0, 'nr': -1, 'type': '', 'pattern': '', 'filename': '/home/zimski/Fasterize/chef-repo/lib/ansible_utils.rb', 'text': '  def read_ansible_output outputdir'}, {'lnum': 60, 'col': 21, 'valid': 1, 'vcol': 0, 'nr': -1, 'type': '', 'pattern': '', 'filename': '/home/zimski/Fasterize/chef-repo/lib/infra_utils.rb', 'text': '      AnsibleUtils::read_ansible_output(outputdir).reduce({}) {|result, (host, status)|'}, {'lnum': 157, 'col': 21, 'valid': 1, 'vcol': 0, 'nr': -1, 'type': '', 'pattern': '', 'filename': '/home/zimski/Fasterize/chef-repo/lib/host_utils.rb', 'text': '      AnsibleUtils::read_ansible_output(outputdir).each { |dns, status|'}, {'lnum': 618, 'col': 30, 'valid': 1, 'vcol': 0, 'nr': -1, 'type': '', 'pattern': '', 'filename': '/home/zimski/Fasterize/chef-repo/lib/host_utils.rb', 'text': '      output = AnsibleUtils::read_ansible_output(outputdir).each { |dns, output|'}])
let SessionLoad = 1
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/Fasterize/fstrz
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +1 Rakefile
badd +77 lib/infra_utils.rb
badd +86 libexec/fstrz-config
badd +11 playbooks/setup-customer-https-optimization.yml
badd +308 lib/host_utils.rb
badd +402 spec/infra_utils_spec.rb
badd +130 spec/host_utils_spec.rb
badd +50 lib/config_utils.rb
badd +21 libexec/fstrz-infra
badd +119 lib/ansible_utils.rb
badd +2 config/scripts/https_customer_status.sh
badd +123 lib/env_utils.rb
badd +6 lib/fstrz_config/customer_config.rb
badd +1 config/docker/fasterize-front.Dockerfile
badd +47 libexec/fstrz-container
badd +54 lib/docker_utils.rb
badd +5 config/docker/fasterize-cache.Dockerfile
argglobal
silent! argdel *
argadd Rakefile
edit config/docker/fasterize-front.Dockerfile
set splitbelow splitright
wincmd _ | wincmd |
split
1wincmd k
wincmd w
wincmd t
set winheight=1 winwidth=1
exe '1resize ' . ((&lines * 51 + 32) / 65)
exe '2resize ' . ((&lines * 10 + 32) / 65)
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 19 - ((18 * winheight(0) + 25) / 51)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
19
normal! 035|
wincmd w
argglobal
enew
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
wincmd w
exe '1resize ' . ((&lines * 51 + 32) / 65)
exe '2resize ' . ((&lines * 10 + 32) / 65)
tabnext 1
if exists('s:wipebuf') && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
"   silent exe 'bwipe ' . s:wipebuf
endif
" unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save

" Support for special windows like quick-fix and plug-in windows.
" Everything down here is generated by vim-session (not supported
" by :mksession out of the box).

2wincmd w
tabnext 1
let s:bufnr_save = bufnr("%")
let s:cwd_save = getcwd()
cwindow
if !getbufvar(s:bufnr_save, '&modified')
  let s:wipebuflines = getbufline(s:bufnr_save, 1, '$')
  if len(s:wipebuflines) <= 1 && empty(get(s:wipebuflines, 0, ''))
    silent execute 'bwipeout' s:bufnr_save
  endif
endif
execute "cd" fnameescape(s:cwd_save)
1resize 51|vert 1resize 173|2resize 10|vert 2resize 173|
1wincmd w
tabnext 1
if exists('s:wipebuf')
  if empty(bufname(s:wipebuf))
if !getbufvar(s:wipebuf, '&modified')
  let s:wipebuflines = getbufline(s:wipebuf, 1, '$')
  if len(s:wipebuflines) <= 1 && empty(get(s:wipebuflines, 0, ''))
    silent execute 'bwipeout' s:wipebuf
  endif
endif
  endif
endif
doautoall SessionLoadPost
unlet SessionLoad
" vim: ft=vim ro nowrap smc=128
